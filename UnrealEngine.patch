diff --git a/Engine/Source/Runtime/Engine/Classes/Engine/World.h b/Engine/Source/Runtime/Engine/Classes/Engine/World.h
index e96e60b..292a108 100644
--- a/Engine/Source/Runtime/Engine/Classes/Engine/World.h
+++ b/Engine/Source/Runtime/Engine/Classes/Engine/World.h
@@ -928,6 +928,10 @@ public:
 	 *  You need Physics Scene if you'd like to trace. This flag changed ticking */
 	bool										bShouldSimulatePhysics;
 
+	/** Min and max time to clamp a world tick. */
+	float                                       MinDeltaSeconds;
+	float                                       MaxDeltaSeconds;
+
 #if WITH_EDITOR
 	/** this is special flag to enable collision by default for components that are not Volume
 	 * currently only used by editor level viewport world, and do not use this for in-game scene
diff --git a/Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp b/Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp
index 44365fc..02d696b 100644
--- a/Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp
+++ b/Engine/Source/Runtime/Engine/Private/Components/PrimitiveComponent.cpp
@@ -1425,7 +1425,6 @@ bool UPrimitiveComponent::MoveComponentImpl( const FVector& Delta, const FQuat&
 				const float DeltaSize = FMath::Sqrt(DeltaSizeSq);
 				for(int32 HitIdx=0; HitIdx<Hits.Num(); HitIdx++)
 				{
-					PullBackHit(Hits[HitIdx], TraceStart, TraceEnd, DeltaSize);
 				}
 			}
 
diff --git a/Engine/Source/Runtime/Engine/Private/LevelTick.cpp b/Engine/Source/Runtime/Engine/Private/LevelTick.cpp
index de5b04e..1128afe 100644
--- a/Engine/Source/Runtime/Engine/Private/LevelTick.cpp
+++ b/Engine/Source/Runtime/Engine/Private/LevelTick.cpp
@@ -1112,7 +1112,7 @@ void UWorld::Tick( ELevelTick TickType, float DeltaSeconds )
 	// apply time multipliers
 	DeltaSeconds *= Info->GetEffectiveTimeDilation();
 	// Clamp time between 2000 fps and 2.5 fps.
-	DeltaSeconds = FMath::Clamp(DeltaSeconds,0.0005f,0.40f);
+	DeltaSeconds = FMath::Clamp(DeltaSeconds, MinDeltaSeconds, MaxDeltaSeconds);
 	DeltaTimeSeconds = DeltaSeconds;
 
 	if ( !bIsPaused )
diff --git a/Engine/Source/Runtime/Engine/Private/World.cpp b/Engine/Source/Runtime/Engine/Private/World.cpp
index 0479097..276a448 100644
--- a/Engine/Source/Runtime/Engine/Private/World.cpp
+++ b/Engine/Source/Runtime/Engine/Private/World.cpp
@@ -123,6 +123,8 @@ UWorld::UWorld( const FObjectInitializer& ObjectInitializer )
 ,   AudioDeviceHandle(INDEX_NONE)
 ,	FlushLevelStreamingType(EFlushLevelStreamingType::None)
 ,	NextTravelType(TRAVEL_Relative)
+,   MinDeltaSeconds(0.0005f)
+,   MaxDeltaSeconds(0.40f)
 {
 	TimerManager = new FTimerManager();
 #if WITH_EDITOR
diff --git a/Engine/Source/Runtime/Linux/ALAudio/Private/ALAudioDevice.cpp b/Engine/Source/Runtime/Linux/ALAudio/Private/ALAudioDevice.cpp
index f917903..84d2cba 100644
--- a/Engine/Source/Runtime/Linux/ALAudio/Private/ALAudioDevice.cpp
+++ b/Engine/Source/Runtime/Linux/ALAudio/Private/ALAudioDevice.cpp
@@ -84,12 +84,19 @@ void FALAudioDevice::TeardownHardware( void )
 	// Close the hardware device
 	if( &alcCloseDevice )
 	{
-		checkf(HardwareDevice, TEXT("Tearing down invalid OpenAL device! (HardwareDevice should not be null)."));
-		const ALCchar* DeviceName = alcGetString(HardwareDevice, ALC_DEVICE_SPECIFIER);
-		UE_LOG(LogALAudio, Log, TEXT("Closing ALAudio device : %s"), StringCast<TCHAR>(static_cast<const ANSICHAR*>(DeviceName)).Get());
+		if(HardwareDevice)
+		{
+			// checkf(HardwareDevice, TEXT("Tearing down invalid OpenAL device! (HardwareDevice should not be null)."));
+			const ALCchar* DeviceName = alcGetString(HardwareDevice, ALC_DEVICE_SPECIFIER);
+			UE_LOG(LogALAudio, Log, TEXT("Closing ALAudio device : %s"), StringCast<TCHAR>(static_cast<const ANSICHAR*>(DeviceName)).Get());
 
-		alcCloseDevice( HardwareDevice );
-		HardwareDevice = nullptr;
+			alcCloseDevice( HardwareDevice );
+			HardwareDevice = nullptr;
+		}
+		else
+		{
+			UE_LOG(LogALAudio, Log, TEXT("Error: No ALAudio device found"));
+		}
 	}
 
 }
diff --git a/Engine/Plugins/ScriptPlugin/Source/ScriptPlugin/ScriptPlugin.Build.cs b/Engine/Plugins/ScriptPlugin/Source/ScriptPlugin/ScriptPlugin.Build.cs
index 3f80999..ce02c6a 100644
--- a/Engine/Plugins/ScriptPlugin/Source/ScriptPlugin/ScriptPlugin.Build.cs
+++ b/Engine/Plugins/ScriptPlugin/Source/ScriptPlugin/ScriptPlugin.Build.cs
@@ -54,14 +54,14 @@ namespace UnrealBuildTool.Rules
 				);
 
 			var LuaPath = Path.Combine("..", "Plugins", "ScriptPlugin", "Source", "Lua");				
-			var LuaLibDirectory = Path.Combine(LuaPath, "Lib", Target.Platform.ToString(), "Release");
-			var LuaLibPath = Path.Combine(LuaLibDirectory, "Lua.lib");
+			var LuaLibDirectory = Path.Combine(LuaPath, "lua-5.2.4", "src");
+			var LuaLibPath = Path.Combine(LuaLibDirectory, "liblua.a");
 			if (File.Exists(LuaLibPath))
 			{					
 				Definitions.Add("WITH_LUA=1");
 
 				// Path to Lua include files
-				var IncludePath = Path.GetFullPath(Path.Combine(LuaPath, "Include"));
+				var IncludePath = Path.GetFullPath(LuaLibDirectory);
 				PrivateIncludePaths.Add(IncludePath);
 
 				// Lib file
@@ -76,4 +76,4 @@ namespace UnrealBuildTool.Rules
 			}
 		}
 	}
-}
\ No newline at end of file
+}
